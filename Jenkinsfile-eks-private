pipeline {
    parameters {
        choice(name: 'ACTION', choices: ['APPLY', 'DESTROY'], description: 'Choose action to perform')
        choice(name: 'INFRASTRUCTURE', choices: [
            '1-eks-private-cluster',
            '2-AWS-LB-Controller',
            '3-EXT-DNS',
            '4-Metrics-Server',
            '5-Cluster-AutoScaler',
            '6-EBS-CSI-DRIVER',
            '7-Argocd-Ingress'
        ], description: 'Choose infrastructure to provision')
        booleanParam(name: 'autoApprove', defaultValue: false, description: 'Automatically run the selected action after generating plan?')
    }
    environment {
        AWS_ACCESS_KEY_ID     = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
        RESOURCE_DIR          = 'eks/resources'
    }

    agent {
        docker {
            image 'hashicorp/terraform:1.9.3'
            args '-e AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY --entrypoint=""'
        }
    }

    stages {
        stage('Terraform and Checkout') {
            parallel {
                stage('Verify Docker Setup') {
                    steps {
                        sh 'terraform --version'  // Ensure Terraform command works
                    }
                }

                stage('Checkout') {
                    steps {
                        script {
                            sh 'find . -maxdepth 1 ! -name . -exec rm -rf {} +' // Clean workspace without removing the directory
                            dir("eks") {
                                git branch: 'main', url: 'https://github.com/vidalgithub/TERRAFORM_DEMOS.git'
                                sh 'ls -la' // List files to confirm checkout
                                sh 'pwd' // Print working directory
                            }
                        }
                    }
                }
            }
        }

        stage('Plan') {
            when {
                expression { return params.ACTION == 'APPLY' }
            }
            steps {
                script {
                    def infraDir
                    switch (params.INFRASTRUCTURE) {
                        case '1-eks-private-cluster':
                            infraDir = '10-eks-PRIVate-vpc-BG'
                            break
                        case '2-AWS-LB-Controller':
                            infraDir = '11-aws-LBC-install-terraform-manifests'
                            break
                        case '3-EXT-DNS':
                            infraDir = '14-externaldns-install-terraform-manifests'
                            break
                        case '4-Metrics-Server':
                            infraDir = '27-tf-k8s-METRICS-SERVER-terraform-manifests'
                            break
                        case '5-Cluster-AutoScaler':
                            infraDir = '26-tf-CA-cluster-autoscaler-install-terraform-manifests'
                            break
                        case '6-EBS-CSI-DRIVER':
                            infraDir = '06-ebs-EBS-addon-terraform-manifests'
                            break
                        case '7-Argocd-Ingress':
                            infraDir = '36-ARGOCD-service-HTTP2-AWS-LBC-Ingress'
                            break
                    }
                    dir("${env.RESOURCE_DIR}/${infraDir}") {
                        sh '''
                           pwd
                           ls
                           terraform init
                           terraform plan -out=tfplan
                           terraform show -no-color tfplan > tfplan.txt
                        '''
                    }
                }
            }
        }

        stage('Plan Destroy') {
            when {
                expression { return params.ACTION == 'DESTROY' }
            }
            steps {
                script {
                    def infraDir
                    switch (params.INFRASTRUCTURE) {
                        case '1-eks-private-cluster':
                            infraDir = '10-eks-PRIVate-vpc-BG'
                            break
                        case '2-AWS-LB-Controller':
                            infraDir = '11-aws-LBC-install-terraform-manifests'
                            break
                        case '3-EXT-DNS':
                            infraDir = '14-externaldns-install-terraform-manifests'
                            break
                        case '4-Metrics-Server':
                            infraDir = '27-tf-k8s-METRICS-SERVER-terraform-manifests'
                            break
                        case '5-Cluster-AutoScaler':
                            infraDir = '26-tf-CA-cluster-autoscaler-install-terraform-manifests'
                            break
                        case '6-EBS-CSI-DRIVER':
                            infraDir = '06-ebs-EBS-addon-terraform-manifests'
                            break
                        case '7-Argocd-Ingress':
                            infraDir = '36-ARGOCD-service-HTTP2-AWS-LBC-Ingress'
                            break
                    }
                    dir("${env.RESOURCE_DIR}/${infraDir}") {
                        sh '''
                           terraform init
                           terraform plan -destroy -out=tfplan-destroy
                           terraform show -no-color tfplan-destroy > tfplan-destroy.txt
                        '''
                    }
                }
            }
        }

        stage('Approval') {
            when {
                not {
                    equals expected: true, actual: params.autoApprove
                }
            }
            steps {
                script {
                    def infraDir
                    switch (params.INFRASTRUCTURE) {
                        case '1-eks-private-cluster':
                            infraDir = '10-eks-PRIVate-vpc-BG'
                            break
                        case '2-AWS-LB-Controller':
                            infraDir = '11-aws-LBC-install-terraform-manifests'
                            break
                        case '3-EXT-DNS':
                            infraDir = '14-externaldns-install-terraform-manifests'
                            break
                        case '4-Metrics-Server':
                            infraDir = '27-tf-k8s-METRICS-SERVER-terraform-manifests'
                            break
                        case '5-Cluster-AutoScaler':
                            infraDir = '26-tf-CA-cluster-autoscaler-install-terraform-manifests'
                            break
                        case '6-EBS-CSI-DRIVER':
                            infraDir = '06-ebs-EBS-addon-terraform-manifests'
                            break
                        case '7-Argocd-Ingress':
                            infraDir = '36-ARGOCD-service-HTTP2-AWS-LBC-Ingress'
                            break
                    }
                    def planFile = params.ACTION == 'APPLY' ? "${env.RESOURCE_DIR}/${infraDir}/tfplan.txt" : "${env.RESOURCE_DIR}/${infraDir}/tfplan-destroy.txt"
                    
                    // Debugging statements
                    sh "echo 'Plan file path: ${planFile}'"
                    sh "ls -la ${env.RESOURCE_DIR}/${infraDir}"

                    def plan = readFile planFile
                    input message: "Do you want to ${params.ACTION.toLowerCase()} the resources?",
                          parameters: [text(name: 'Plan', description: 'Please review the plan', defaultValue: plan)]
                }
            }
        }

        stage('Apply') {
            when {
                expression { return params.ACTION == 'APPLY' }
            }
            steps {
                script {
                    def infraDir
                    switch (params.INFRASTRUCTURE) {
                        case '1-eks-private-cluster':
                            infraDir = '10-eks-PRIVate-vpc-BG'
                            break
                        case '2-AWS-LB-Controller':
                            infraDir = '11-aws-LBC-install-terraform-manifests'
                            break
                        case '3-EXT-DNS':
                            infraDir = '14-externaldns-install-terraform-manifests'
                            break
                        case '4-Metrics-Server':
                            infraDir = '27-tf-k8s-METRICS-SERVER-terraform-manifests'
                            break
                        case '5-Cluster-AutoScaler':
                            infraDir = '26-tf-CA-cluster-autoscaler-install-terraform-manifests'
                            break
                        case '6-EBS-CSI-DRIVER':
                            infraDir = '06-ebs-EBS-addon-terraform-manifests'
                            break
                        case '7-Argocd-Ingress':
                            infraDir = '36-ARGOCD-service-HTTP2-AWS-LBC-Ingress'
                            break
                    }
                    dir("${env.RESOURCE_DIR}/${infraDir}") {
                        sh 'terraform apply -input=false tfplan'
                    }
                }
            }
        }

        stage('Destroy') {
            when {
                expression { return params.ACTION == 'DESTROY' }
            }
            steps {
                script {
                    def infraDir
                    switch (params.INFRASTRUCTURE) {
                        case '1-eks-private-cluster':
                            infraDir = '10-eks-PRIVate-vpc-BG'
                            break
                        case '2-AWS-LB-Controller':
                            infraDir = '11-aws-LBC-install-terraform-manifests'
                            break
                        case '3-EXT-DNS':
                            infraDir = '14-externaldns-install-terraform-manifests'
                            break
                        case '4-Metrics-Server':
                            infraDir = '27-tf-k8s-METRICS-SERVER-terraform-manifests'
                            break
                        case '5-Cluster-AutoScaler':
                            infraDir = '26-tf-CA-cluster-autoscaler-install-terraform-manifests'
                            break
                        case '6-EBS-CSI-DRIVER':
                            infraDir = '06-ebs-EBS-addon-terraform-manifests'
                            break
                        case '7-Argocd-Ingress':
                            infraDir = '36-ARGOCD-service-HTTP2-AWS-LBC-Ingress'
                            break
                    }
                    dir("${env.RESOURCE_DIR}/${infraDir}") {
                        sh 'terraform destroy -auto-approve'
                    }
                }
            }
        }
    }
}
