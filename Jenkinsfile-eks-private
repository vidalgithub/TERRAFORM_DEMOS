pipeline {
    parameters {
        choice(name: 'ACTION', choices: ['APPLY', 'DESTROY'], description: 'Choose action to perform')
        booleanParam(name: 'autoApprove', defaultValue: false, description: 'Automatically run the selected action after generating plan?')
    }
    environment {
        AWS_ACCESS_KEY_ID     = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
    }

    agent {
        docker {
            image 'hashicorp/terraform:1.9.3'
            args '-e AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY --entrypoint=""'
        }
    }

    stages {
        stage('Terraform and Checkout') {
            parallel {
                stage('Verify Docker Setup') {
                    steps {
                        sh 'terraform --version'  // Ensure Terraform command works
                    }
                }

                stage('Checkout') {
                    steps {
                        //cleanWs() // Clean workspace before checkout
                        script {
                            sh 'mkdir -p eks' // Create the directory
                            dir("eks") {
                                git "https://github.com/vidalgithub/Terraform-Jenkins.git"
                                sh 'ls -la' // List files to confirm checkout
                                sh 'pwd' // Print working directory
                            }
                        }
                    }
                }
            }
        }

        stage('Plan') {
            when {
                expression { return params.ACTION == 'APPLY' }
            }
            steps {
                script {
                    dir("eks/resources/10-eks-PRIVate-vpc-BG") {
                        sh '''
                           pwd
                           ls
                           terraform init
                           terraform plan -out=tfplan
                           terraform show -no-color tfplan > tfplan.txt
                        '''
                    }
                }
            }
        }

        stage('Plan Destroy') {
            when {
                expression { return params.ACTION == 'DESTROY' }
            }
            steps {
                script {
                    dir("eks/resources/10-eks-PRIVate-vpc-BG") {
                        sh 'terraform init'
                        sh 'terraform plan -destroy -out=tfplan-destroy'
                        sh 'terraform show -no-color tfplan-destroy > tfplan-destroy.txt'
                    }
                }
            }
        }

        stage('Approval') {
            when {
                not {
                    equals expected: true, actual: params.autoApprove
                }
            }
            steps {
                script {
                    def planFile = params.ACTION == 'APPLY' ? 'eks/resources/10-eks-PRIVate-vpc-BG/tfplan.txt' : 'eks/resources/10-eks-PRIVate-vpc-BG/tfplan-destroy.txt'
                    def plan = readFile planFile
                    input message: "Do you want to ${params.ACTION.toLowerCase()} the resources?",
                          parameters: [text(name: 'Plan', description: 'Please review the plan', defaultValue: plan)]
                }
            }
        }

        stage('Apply') {
            when {
                expression { return params.ACTION == 'APPLY' }
            }
            steps {
                script {
                    dir("eks/resources/10-eks-PRIVate-vpc-BG") {
                        sh 'terraform apply -input=false tfplan'
                    }
                }
            }
        }

        stage('Destroy') {
            when {
                expression { return params.ACTION == 'DESTROY' }
            }
            steps {
                script {
                    dir("eks/resources/10-eks-PRIVate-vpc-BG") {
                        sh 'terraform apply -destroy -input=false tfplan-destroy'
                    }
                }
            }
        }
    }
}
